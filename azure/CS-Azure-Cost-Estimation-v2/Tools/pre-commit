#!/bin/bash

# Pre-commit hook to check PowerShell files for syntax issues that can cause runtime errors:
# 1. Backtick alignment issues
# 2. Improper parameter passing in Start-Job commands

# Get the list of PowerShell files that are staged for commit
powershell_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ps1|psm1)$')

if [ -z "$powershell_files" ]; then
    # No PowerShell files to check
    exit 0
fi

repo_root=$(git rev-parse --show-toplevel)

# Paths to test scripts
backtick_script_path="azure/CS-Azure-Cost-Estimation-v2/Tests/Test-BacktickAlignment.ps1"
job_args_script_path="azure/CS-Azure-Cost-Estimation-v2/Tests/Test-JobArgumentList.ps1"

full_backtick_script_path="$repo_root/$backtick_script_path"
full_job_args_script_path="$repo_root/$job_args_script_path"

# Check that test scripts exist
if [ ! -f "$full_backtick_script_path" ]; then
    echo "Error: Backtick alignment test script not found at $full_backtick_script_path"
    exit 1
fi

if [ ! -f "$full_job_args_script_path" ]; then
    echo "Error: Job argument list test script not found at $full_job_args_script_path"
    exit 1
fi

errors=0

# Function to check a file with a specified test
check_file() {
    local file=$1
    local test_script=$2
    local test_name=$3
    
    echo "Checking $file for $test_name..."
    
    # Run the test script on the file, suppressing output initially
    pwsh -Command "& '$test_script' -Path '$repo_root/$file'" > /dev/null
    
    if [ $? -ne 0 ]; then
        # If the test failed, show the output with error details
        echo "❌ $test_name found in $file:"
        pwsh -Command "& '$test_script' -Path '$repo_root/$file'"
        return 1
    else
        echo "✅ $file passed $test_name"
        return 0
    fi
}

# Check each PowerShell file for both types of issues
for file in $powershell_files; do
    # Check for backtick alignment issues
    check_file "$file" "$full_backtick_script_path" "backtick alignment issues"
    if [ $? -ne 0 ]; then
        errors=1
    fi
    
    # Check for Start-Job ArgumentList issues
    check_file "$file" "$full_job_args_script_path" "Start-Job ArgumentList issues"
    if [ $? -ne 0 ]; then
        errors=1
    fi
done

if [ $errors -ne 0 ]; then
    echo ""
    echo "❌ Commit rejected: Please fix the issues and try again."
    echo "   These issues can cause 'Variable reference is not valid' runtime errors."
    exit 1
fi

echo ""
echo "✅ All PowerShell files passed syntax checks."
exit 0
